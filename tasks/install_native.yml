---
# tasks file for caddy2

- name: installing pre-requisits (debian)
  apt:
    name:
      - debian-keyring
      - debian-archive-keyring
      - apt-transport-https
    state: present
    update_cache: yes
  when: ansible_facts['os_family'] == "Debian"

#- name: obtaining caddy2 apt key
#  ansible.builtin.get_url:
#    url: https://dl.cloudsmith.io/public/caddy/stable/gpg.key
#    dest: /etc/apt/trusted.gpg.d/caddy-stable.asc
#    mode: '0644'

- name: adding caddy gpg key
  become: yes
  shell: |
    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor --yes -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
  when: ansible_facts['os_family'] == "Debian"

- name: configuring caddy2 repository
  ansible.builtin.get_url:
    url: https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt
    dest: /etc/apt/sources.list.d/caddy-stable.list
    mode: '0644'

- name: installing caddy2 (debian)
  apt:
    name: caddy
    state: "{{ caddy2_state if caddy2_state != 'present' else 'present' }}"
    update_cache: yes
  when: ansible_facts['os_family'] == "Debian"

- name: stopping caddy service
  systemd:
    name: caddy
    state: stopped

- name: copying Caddyfile
  template:
    src: Caddyfile.j2
    dest: "/etc/caddy/Caddyfile"
    mode: "u=rwX,g=rX,o=rX"
    owner: "{{ caddy2_file_owner | default('root') }}"
    group: "{{ caddy2_file_group | default('root') }}"
  when: caddy2_state == "present"

- name: ensure /usr/local/share/ca-certificates exists (debian)
  file:
    path: /usr/local/share/ca-certificates
    state: directory
    mode: '0644'

- name: send internal ca's to be trusted
  copy:
    src: "{{ ca_trusted }}"
    dest: /usr/local/share/ca-certificates/
  loop: "{{ internal_ca_certs }}"
  loop_control: 
    loop_var: ca_trusted
  when: internal_ca_certs is defined

- name: trust internal CA's
  shell: |
    update-ca-certificates
  loop: "{{ internal_ca_certs }}"
  loop_control: 
    loop_var: ca_trusted
  when: internal_ca_certs is defined

- name: starting and enabling caddy service
  systemd:
    name: caddy
    state: started
    enabled: yes
  when: caddy2_state == "present"